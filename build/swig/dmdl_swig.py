# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dmdl_swig', [dirname(__file__)])
        except ImportError:
            import _dmdl_swig
            return _dmdl_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_dmdl_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dmdl_swig = swig_import_helper()
    del swig_import_helper
else:
    import _dmdl_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _dmdl_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _dmdl_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _dmdl_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _dmdl_swig.high_res_timer_epoch()
class timer(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::timer.

    To avoid accidental use of raw pointers, dmdl::timer's constructor is in a private implementation class. dmdl::timer::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        timer_type : 
        duration_ms : 
        system_time_granularity_us : 
        reserved_time_ms : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, timer_type, duration_ms, system_time_granularity_us, reserved_time_ms):
        """
        make(int develop_mode, int block_id, int timer_type, double duration_ms, int system_time_granularity_us, double reserved_time_ms) -> timer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::timer.

        To avoid accidental use of raw pointers, dmdl::timer's constructor is in a private implementation class. dmdl::timer::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            timer_type : 
            duration_ms : 
            system_time_granularity_us : 
            reserved_time_ms : 
        """
        return _dmdl_swig.timer_make(develop_mode, block_id, timer_type, duration_ms, system_time_granularity_us, reserved_time_ms)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_timer
    __del__ = lambda self: None
timer_swigregister = _dmdl_swig.timer_swigregister
timer_swigregister(timer)

def timer_make(develop_mode, block_id, timer_type, duration_ms, system_time_granularity_us, reserved_time_ms):
    """
    timer_make(int develop_mode, int block_id, int timer_type, double duration_ms, int system_time_granularity_us, double reserved_time_ms) -> timer_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::timer.

    To avoid accidental use of raw pointers, dmdl::timer's constructor is in a private implementation class. dmdl::timer::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        timer_type : 
        duration_ms : 
        system_time_granularity_us : 
        reserved_time_ms : 
    """
    return _dmdl_swig.timer_make(develop_mode, block_id, timer_type, duration_ms, system_time_granularity_us, reserved_time_ms)

class timer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::timer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::timer)> self) -> timer_sptr
        __init__(boost::shared_ptr<(gr::dmdl::timer)> self, timer p) -> timer_sptr
        """
        this = _dmdl_swig.new_timer_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(timer_sptr self) -> timer"""
        return _dmdl_swig.timer_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_timer_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, timer_type, duration_ms, system_time_granularity_us, reserved_time_ms):
        """
        make(timer_sptr self, int develop_mode, int block_id, int timer_type, double duration_ms, int system_time_granularity_us, double reserved_time_ms) -> timer_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::timer.

        To avoid accidental use of raw pointers, dmdl::timer's constructor is in a private implementation class. dmdl::timer::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            timer_type : 
            duration_ms : 
            system_time_granularity_us : 
            reserved_time_ms : 
        """
        return _dmdl_swig.timer_sptr_make(self, develop_mode, block_id, timer_type, duration_ms, system_time_granularity_us, reserved_time_ms)


    def history(self):
        """history(timer_sptr self) -> unsigned int"""
        return _dmdl_swig.timer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(timer_sptr self, int which, int delay)
        declare_sample_delay(timer_sptr self, unsigned int delay)
        """
        return _dmdl_swig.timer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(timer_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.timer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(timer_sptr self) -> int"""
        return _dmdl_swig.timer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(timer_sptr self) -> double"""
        return _dmdl_swig.timer_sptr_relative_rate(self)


    def start(self):
        """start(timer_sptr self) -> bool"""
        return _dmdl_swig.timer_sptr_start(self)


    def stop(self):
        """stop(timer_sptr self) -> bool"""
        return _dmdl_swig.timer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(timer_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.timer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(timer_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.timer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(timer_sptr self) -> int"""
        return _dmdl_swig.timer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(timer_sptr self, int m)"""
        return _dmdl_swig.timer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(timer_sptr self)"""
        return _dmdl_swig.timer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(timer_sptr self) -> bool"""
        return _dmdl_swig.timer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(timer_sptr self, int m)"""
        return _dmdl_swig.timer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(timer_sptr self) -> int"""
        return _dmdl_swig.timer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(timer_sptr self, int i) -> long"""
        return _dmdl_swig.timer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(timer_sptr self, long max_output_buffer)
        set_max_output_buffer(timer_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.timer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(timer_sptr self, int i) -> long"""
        return _dmdl_swig.timer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(timer_sptr self, long min_output_buffer)
        set_min_output_buffer(timer_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.timer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(timer_sptr self, int which) -> float
        pc_input_buffers_full(timer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(timer_sptr self, int which) -> float
        pc_input_buffers_full_avg(timer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(timer_sptr self, int which) -> float
        pc_input_buffers_full_var(timer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(timer_sptr self, int which) -> float
        pc_output_buffers_full(timer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(timer_sptr self, int which) -> float
        pc_output_buffers_full_avg(timer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(timer_sptr self, int which) -> float
        pc_output_buffers_full_var(timer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(timer_sptr self) -> float"""
        return _dmdl_swig.timer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(timer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.timer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(timer_sptr self)"""
        return _dmdl_swig.timer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(timer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.timer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(timer_sptr self) -> int"""
        return _dmdl_swig.timer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(timer_sptr self) -> int"""
        return _dmdl_swig.timer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(timer_sptr self, int priority) -> int"""
        return _dmdl_swig.timer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(timer_sptr self) -> std::string"""
        return _dmdl_swig.timer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(timer_sptr self) -> std::string"""
        return _dmdl_swig.timer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(timer_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.timer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(timer_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.timer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(timer_sptr self) -> long"""
        return _dmdl_swig.timer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(timer_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.timer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(timer_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.timer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(timer_sptr self) -> std::string"""
        return _dmdl_swig.timer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(timer_sptr self, std::string name)"""
        return _dmdl_swig.timer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(timer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.timer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(timer_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.timer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(timer_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.timer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(timer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.timer_sptr_message_subscribers(self, which_port)

timer_sptr_swigregister = _dmdl_swig.timer_sptr_swigregister
timer_sptr_swigregister(timer_sptr)


timer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
timer = timer.make;

class backoff(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::backoff.

    To avoid accidental use of raw pointers, dmdl::backoff's constructor is in a private implementation class. dmdl::backoff::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        backoff_type : 
        backoff_time_unit_ms : 
        min_backoff_ms : 
        max_backoff_ms : 
        apply_cs : 
        cs_threshold : 
        system_time_granularity_us : 
        virtual_cs : 
        min_window_size : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, backoff_type, backoff_time_unit_ms, min_backoff_ms, max_backoff_ms, apply_cs, cs_threshold, system_time_granularity_us, virtual_cs, min_window_size):
        """
        make(int develop_mode, int block_id, int backoff_type, int backoff_time_unit_ms, int min_backoff_ms, int max_backoff_ms, int apply_cs, double cs_threshold, int system_time_granularity_us, int virtual_cs, int min_window_size) -> backoff_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::backoff.

        To avoid accidental use of raw pointers, dmdl::backoff's constructor is in a private implementation class. dmdl::backoff::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            backoff_type : 
            backoff_time_unit_ms : 
            min_backoff_ms : 
            max_backoff_ms : 
            apply_cs : 
            cs_threshold : 
            system_time_granularity_us : 
            virtual_cs : 
            min_window_size : 
        """
        return _dmdl_swig.backoff_make(develop_mode, block_id, backoff_type, backoff_time_unit_ms, min_backoff_ms, max_backoff_ms, apply_cs, cs_threshold, system_time_granularity_us, virtual_cs, min_window_size)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_backoff
    __del__ = lambda self: None
backoff_swigregister = _dmdl_swig.backoff_swigregister
backoff_swigregister(backoff)

def backoff_make(develop_mode, block_id, backoff_type, backoff_time_unit_ms, min_backoff_ms, max_backoff_ms, apply_cs, cs_threshold, system_time_granularity_us, virtual_cs, min_window_size):
    """
    backoff_make(int develop_mode, int block_id, int backoff_type, int backoff_time_unit_ms, int min_backoff_ms, int max_backoff_ms, int apply_cs, double cs_threshold, int system_time_granularity_us, int virtual_cs, int min_window_size) -> backoff_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::backoff.

    To avoid accidental use of raw pointers, dmdl::backoff's constructor is in a private implementation class. dmdl::backoff::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        backoff_type : 
        backoff_time_unit_ms : 
        min_backoff_ms : 
        max_backoff_ms : 
        apply_cs : 
        cs_threshold : 
        system_time_granularity_us : 
        virtual_cs : 
        min_window_size : 
    """
    return _dmdl_swig.backoff_make(develop_mode, block_id, backoff_type, backoff_time_unit_ms, min_backoff_ms, max_backoff_ms, apply_cs, cs_threshold, system_time_granularity_us, virtual_cs, min_window_size)

class backoff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::backoff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::backoff)> self) -> backoff_sptr
        __init__(boost::shared_ptr<(gr::dmdl::backoff)> self, backoff p) -> backoff_sptr
        """
        this = _dmdl_swig.new_backoff_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(backoff_sptr self) -> backoff"""
        return _dmdl_swig.backoff_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_backoff_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, backoff_type, backoff_time_unit_ms, min_backoff_ms, max_backoff_ms, apply_cs, cs_threshold, system_time_granularity_us, virtual_cs, min_window_size):
        """
        make(backoff_sptr self, int develop_mode, int block_id, int backoff_type, int backoff_time_unit_ms, int min_backoff_ms, int max_backoff_ms, int apply_cs, double cs_threshold, int system_time_granularity_us, int virtual_cs, int min_window_size) -> backoff_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::backoff.

        To avoid accidental use of raw pointers, dmdl::backoff's constructor is in a private implementation class. dmdl::backoff::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            backoff_type : 
            backoff_time_unit_ms : 
            min_backoff_ms : 
            max_backoff_ms : 
            apply_cs : 
            cs_threshold : 
            system_time_granularity_us : 
            virtual_cs : 
            min_window_size : 
        """
        return _dmdl_swig.backoff_sptr_make(self, develop_mode, block_id, backoff_type, backoff_time_unit_ms, min_backoff_ms, max_backoff_ms, apply_cs, cs_threshold, system_time_granularity_us, virtual_cs, min_window_size)


    def history(self):
        """history(backoff_sptr self) -> unsigned int"""
        return _dmdl_swig.backoff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(backoff_sptr self, int which, int delay)
        declare_sample_delay(backoff_sptr self, unsigned int delay)
        """
        return _dmdl_swig.backoff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(backoff_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.backoff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(backoff_sptr self) -> int"""
        return _dmdl_swig.backoff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(backoff_sptr self) -> double"""
        return _dmdl_swig.backoff_sptr_relative_rate(self)


    def start(self):
        """start(backoff_sptr self) -> bool"""
        return _dmdl_swig.backoff_sptr_start(self)


    def stop(self):
        """stop(backoff_sptr self) -> bool"""
        return _dmdl_swig.backoff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(backoff_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.backoff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(backoff_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.backoff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(backoff_sptr self) -> int"""
        return _dmdl_swig.backoff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(backoff_sptr self, int m)"""
        return _dmdl_swig.backoff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(backoff_sptr self)"""
        return _dmdl_swig.backoff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(backoff_sptr self) -> bool"""
        return _dmdl_swig.backoff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(backoff_sptr self, int m)"""
        return _dmdl_swig.backoff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(backoff_sptr self) -> int"""
        return _dmdl_swig.backoff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(backoff_sptr self, int i) -> long"""
        return _dmdl_swig.backoff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(backoff_sptr self, long max_output_buffer)
        set_max_output_buffer(backoff_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.backoff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(backoff_sptr self, int i) -> long"""
        return _dmdl_swig.backoff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(backoff_sptr self, long min_output_buffer)
        set_min_output_buffer(backoff_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.backoff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(backoff_sptr self, int which) -> float
        pc_input_buffers_full(backoff_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.backoff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(backoff_sptr self, int which) -> float
        pc_input_buffers_full_avg(backoff_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.backoff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(backoff_sptr self, int which) -> float
        pc_input_buffers_full_var(backoff_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.backoff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(backoff_sptr self, int which) -> float
        pc_output_buffers_full(backoff_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.backoff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(backoff_sptr self, int which) -> float
        pc_output_buffers_full_avg(backoff_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.backoff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(backoff_sptr self, int which) -> float
        pc_output_buffers_full_var(backoff_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.backoff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(backoff_sptr self) -> float"""
        return _dmdl_swig.backoff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(backoff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.backoff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(backoff_sptr self)"""
        return _dmdl_swig.backoff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(backoff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.backoff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(backoff_sptr self) -> int"""
        return _dmdl_swig.backoff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(backoff_sptr self) -> int"""
        return _dmdl_swig.backoff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(backoff_sptr self, int priority) -> int"""
        return _dmdl_swig.backoff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(backoff_sptr self) -> std::string"""
        return _dmdl_swig.backoff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(backoff_sptr self) -> std::string"""
        return _dmdl_swig.backoff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(backoff_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.backoff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(backoff_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.backoff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(backoff_sptr self) -> long"""
        return _dmdl_swig.backoff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(backoff_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.backoff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(backoff_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.backoff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(backoff_sptr self) -> std::string"""
        return _dmdl_swig.backoff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(backoff_sptr self, std::string name)"""
        return _dmdl_swig.backoff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(backoff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.backoff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(backoff_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.backoff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(backoff_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.backoff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(backoff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.backoff_sptr_message_subscribers(self, which_port)

backoff_sptr_swigregister = _dmdl_swig.backoff_sptr_swigregister
backoff_sptr_swigregister(backoff_sptr)


backoff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
backoff = backoff.make;

class timeout(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::timeout.

    To avoid accidental use of raw pointers, dmdl::timeout's constructor is in a private implementation class. dmdl::timeout::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        timeout_duration_ms : 
        system_time_granularity_us : 
        llc_protocol : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, timeout_duration_ms, system_time_granularity_us, llc_protocol):
        """
        make(int develop_mode, int block_id, float timeout_duration_ms, int system_time_granularity_us, int llc_protocol) -> timeout_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::timeout.

        To avoid accidental use of raw pointers, dmdl::timeout's constructor is in a private implementation class. dmdl::timeout::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            timeout_duration_ms : 
            system_time_granularity_us : 
            llc_protocol : 
        """
        return _dmdl_swig.timeout_make(develop_mode, block_id, timeout_duration_ms, system_time_granularity_us, llc_protocol)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_timeout
    __del__ = lambda self: None
timeout_swigregister = _dmdl_swig.timeout_swigregister
timeout_swigregister(timeout)

def timeout_make(develop_mode, block_id, timeout_duration_ms, system_time_granularity_us, llc_protocol):
    """
    timeout_make(int develop_mode, int block_id, float timeout_duration_ms, int system_time_granularity_us, int llc_protocol) -> timeout_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::timeout.

    To avoid accidental use of raw pointers, dmdl::timeout's constructor is in a private implementation class. dmdl::timeout::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        timeout_duration_ms : 
        system_time_granularity_us : 
        llc_protocol : 
    """
    return _dmdl_swig.timeout_make(develop_mode, block_id, timeout_duration_ms, system_time_granularity_us, llc_protocol)

class timeout_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::timeout)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::timeout)> self) -> timeout_sptr
        __init__(boost::shared_ptr<(gr::dmdl::timeout)> self, timeout p) -> timeout_sptr
        """
        this = _dmdl_swig.new_timeout_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(timeout_sptr self) -> timeout"""
        return _dmdl_swig.timeout_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_timeout_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, timeout_duration_ms, system_time_granularity_us, llc_protocol):
        """
        make(timeout_sptr self, int develop_mode, int block_id, float timeout_duration_ms, int system_time_granularity_us, int llc_protocol) -> timeout_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::timeout.

        To avoid accidental use of raw pointers, dmdl::timeout's constructor is in a private implementation class. dmdl::timeout::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            timeout_duration_ms : 
            system_time_granularity_us : 
            llc_protocol : 
        """
        return _dmdl_swig.timeout_sptr_make(self, develop_mode, block_id, timeout_duration_ms, system_time_granularity_us, llc_protocol)


    def history(self):
        """history(timeout_sptr self) -> unsigned int"""
        return _dmdl_swig.timeout_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(timeout_sptr self, int which, int delay)
        declare_sample_delay(timeout_sptr self, unsigned int delay)
        """
        return _dmdl_swig.timeout_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(timeout_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.timeout_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(timeout_sptr self) -> int"""
        return _dmdl_swig.timeout_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(timeout_sptr self) -> double"""
        return _dmdl_swig.timeout_sptr_relative_rate(self)


    def start(self):
        """start(timeout_sptr self) -> bool"""
        return _dmdl_swig.timeout_sptr_start(self)


    def stop(self):
        """stop(timeout_sptr self) -> bool"""
        return _dmdl_swig.timeout_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(timeout_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.timeout_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(timeout_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.timeout_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(timeout_sptr self) -> int"""
        return _dmdl_swig.timeout_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(timeout_sptr self, int m)"""
        return _dmdl_swig.timeout_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(timeout_sptr self)"""
        return _dmdl_swig.timeout_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(timeout_sptr self) -> bool"""
        return _dmdl_swig.timeout_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(timeout_sptr self, int m)"""
        return _dmdl_swig.timeout_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(timeout_sptr self) -> int"""
        return _dmdl_swig.timeout_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(timeout_sptr self, int i) -> long"""
        return _dmdl_swig.timeout_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(timeout_sptr self, long max_output_buffer)
        set_max_output_buffer(timeout_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.timeout_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(timeout_sptr self, int i) -> long"""
        return _dmdl_swig.timeout_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(timeout_sptr self, long min_output_buffer)
        set_min_output_buffer(timeout_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.timeout_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(timeout_sptr self, int which) -> float
        pc_input_buffers_full(timeout_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timeout_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(timeout_sptr self, int which) -> float
        pc_input_buffers_full_avg(timeout_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timeout_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(timeout_sptr self, int which) -> float
        pc_input_buffers_full_var(timeout_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timeout_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(timeout_sptr self, int which) -> float
        pc_output_buffers_full(timeout_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timeout_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(timeout_sptr self, int which) -> float
        pc_output_buffers_full_avg(timeout_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timeout_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(timeout_sptr self, int which) -> float
        pc_output_buffers_full_var(timeout_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.timeout_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(timeout_sptr self) -> float"""
        return _dmdl_swig.timeout_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(timeout_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.timeout_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(timeout_sptr self)"""
        return _dmdl_swig.timeout_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(timeout_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.timeout_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(timeout_sptr self) -> int"""
        return _dmdl_swig.timeout_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(timeout_sptr self) -> int"""
        return _dmdl_swig.timeout_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(timeout_sptr self, int priority) -> int"""
        return _dmdl_swig.timeout_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(timeout_sptr self) -> std::string"""
        return _dmdl_swig.timeout_sptr_name(self)


    def symbol_name(self):
        """symbol_name(timeout_sptr self) -> std::string"""
        return _dmdl_swig.timeout_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(timeout_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.timeout_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(timeout_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.timeout_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(timeout_sptr self) -> long"""
        return _dmdl_swig.timeout_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(timeout_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.timeout_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(timeout_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.timeout_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(timeout_sptr self) -> std::string"""
        return _dmdl_swig.timeout_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(timeout_sptr self, std::string name)"""
        return _dmdl_swig.timeout_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(timeout_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.timeout_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(timeout_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.timeout_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(timeout_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.timeout_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(timeout_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.timeout_sptr_message_subscribers(self, which_port)

timeout_sptr_swigregister = _dmdl_swig.timeout_sptr_swigregister
timeout_sptr_swigregister(timeout_sptr)


timeout_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
timeout = timeout.make;

class framing(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::framing.

    To avoid accidental use of raw pointers, dmdl::framing's constructor is in a private implementation class. dmdl::framing::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        frame_type : 
        len_frame_type : 
        frame_index : 
        len_frame_index : 
        destination_address : 
        len_destination_address : 
        source_address : 
        len_source_address : 
        reserved_field_I : 
        len_reserved_field_I : 
        reserved_field_II : 
        len_reserved_field_II : 
        len_payload_length : 
        increase_index : 
        len_num_transmission : 
        reserved_field_ampdu : 
        node_list : 
        slot_list_ms : 
        len_slot_time_beacon : 
        default_payload : 
        default_payload_length : 
        internal_index : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, frame_type, len_frame_type, frame_index, len_frame_index, destination_address, len_destination_address, source_address, len_source_address, reserved_field_I, len_reserved_field_I, reserved_field_II, len_reserved_field_II, len_payload_length, increase_index, len_num_transmission, reserved_field_ampdu, node_list, slot_list_ms, len_slot_time_beacon, default_payload, default_payload_length, internal_index):
        """
        make(int develop_mode, int block_id, int frame_type, int len_frame_type, int frame_index, int len_frame_index, int destination_address, int len_destination_address, int source_address, int len_source_address, int reserved_field_I, int len_reserved_field_I, int reserved_field_II, int len_reserved_field_II, int len_payload_length, int increase_index, int len_num_transmission, int reserved_field_ampdu, std::vector< unsigned int,std::allocator< unsigned int > > node_list, std::vector< unsigned int,std::allocator< unsigned int > > slot_list_ms, int len_slot_time_beacon, int default_payload, int default_payload_length, int internal_index) -> framing_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::framing.

        To avoid accidental use of raw pointers, dmdl::framing's constructor is in a private implementation class. dmdl::framing::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            frame_type : 
            len_frame_type : 
            frame_index : 
            len_frame_index : 
            destination_address : 
            len_destination_address : 
            source_address : 
            len_source_address : 
            reserved_field_I : 
            len_reserved_field_I : 
            reserved_field_II : 
            len_reserved_field_II : 
            len_payload_length : 
            increase_index : 
            len_num_transmission : 
            reserved_field_ampdu : 
            node_list : 
            slot_list_ms : 
            len_slot_time_beacon : 
            default_payload : 
            default_payload_length : 
            internal_index : 
        """
        return _dmdl_swig.framing_make(develop_mode, block_id, frame_type, len_frame_type, frame_index, len_frame_index, destination_address, len_destination_address, source_address, len_source_address, reserved_field_I, len_reserved_field_I, reserved_field_II, len_reserved_field_II, len_payload_length, increase_index, len_num_transmission, reserved_field_ampdu, node_list, slot_list_ms, len_slot_time_beacon, default_payload, default_payload_length, internal_index)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_framing
    __del__ = lambda self: None
framing_swigregister = _dmdl_swig.framing_swigregister
framing_swigregister(framing)

def framing_make(develop_mode, block_id, frame_type, len_frame_type, frame_index, len_frame_index, destination_address, len_destination_address, source_address, len_source_address, reserved_field_I, len_reserved_field_I, reserved_field_II, len_reserved_field_II, len_payload_length, increase_index, len_num_transmission, reserved_field_ampdu, node_list, slot_list_ms, len_slot_time_beacon, default_payload, default_payload_length, internal_index):
    """
    framing_make(int develop_mode, int block_id, int frame_type, int len_frame_type, int frame_index, int len_frame_index, int destination_address, int len_destination_address, int source_address, int len_source_address, int reserved_field_I, int len_reserved_field_I, int reserved_field_II, int len_reserved_field_II, int len_payload_length, int increase_index, int len_num_transmission, int reserved_field_ampdu, std::vector< unsigned int,std::allocator< unsigned int > > node_list, std::vector< unsigned int,std::allocator< unsigned int > > slot_list_ms, int len_slot_time_beacon, int default_payload, int default_payload_length, int internal_index) -> framing_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::framing.

    To avoid accidental use of raw pointers, dmdl::framing's constructor is in a private implementation class. dmdl::framing::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        frame_type : 
        len_frame_type : 
        frame_index : 
        len_frame_index : 
        destination_address : 
        len_destination_address : 
        source_address : 
        len_source_address : 
        reserved_field_I : 
        len_reserved_field_I : 
        reserved_field_II : 
        len_reserved_field_II : 
        len_payload_length : 
        increase_index : 
        len_num_transmission : 
        reserved_field_ampdu : 
        node_list : 
        slot_list_ms : 
        len_slot_time_beacon : 
        default_payload : 
        default_payload_length : 
        internal_index : 
    """
    return _dmdl_swig.framing_make(develop_mode, block_id, frame_type, len_frame_type, frame_index, len_frame_index, destination_address, len_destination_address, source_address, len_source_address, reserved_field_I, len_reserved_field_I, reserved_field_II, len_reserved_field_II, len_payload_length, increase_index, len_num_transmission, reserved_field_ampdu, node_list, slot_list_ms, len_slot_time_beacon, default_payload, default_payload_length, internal_index)

class framing_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::framing)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::framing)> self) -> framing_sptr
        __init__(boost::shared_ptr<(gr::dmdl::framing)> self, framing p) -> framing_sptr
        """
        this = _dmdl_swig.new_framing_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(framing_sptr self) -> framing"""
        return _dmdl_swig.framing_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_framing_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, frame_type, len_frame_type, frame_index, len_frame_index, destination_address, len_destination_address, source_address, len_source_address, reserved_field_I, len_reserved_field_I, reserved_field_II, len_reserved_field_II, len_payload_length, increase_index, len_num_transmission, reserved_field_ampdu, node_list, slot_list_ms, len_slot_time_beacon, default_payload, default_payload_length, internal_index):
        """
        make(framing_sptr self, int develop_mode, int block_id, int frame_type, int len_frame_type, int frame_index, int len_frame_index, int destination_address, int len_destination_address, int source_address, int len_source_address, int reserved_field_I, int len_reserved_field_I, int reserved_field_II, int len_reserved_field_II, int len_payload_length, int increase_index, int len_num_transmission, int reserved_field_ampdu, std::vector< unsigned int,std::allocator< unsigned int > > node_list, std::vector< unsigned int,std::allocator< unsigned int > > slot_list_ms, int len_slot_time_beacon, int default_payload, int default_payload_length, int internal_index) -> framing_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::framing.

        To avoid accidental use of raw pointers, dmdl::framing's constructor is in a private implementation class. dmdl::framing::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            frame_type : 
            len_frame_type : 
            frame_index : 
            len_frame_index : 
            destination_address : 
            len_destination_address : 
            source_address : 
            len_source_address : 
            reserved_field_I : 
            len_reserved_field_I : 
            reserved_field_II : 
            len_reserved_field_II : 
            len_payload_length : 
            increase_index : 
            len_num_transmission : 
            reserved_field_ampdu : 
            node_list : 
            slot_list_ms : 
            len_slot_time_beacon : 
            default_payload : 
            default_payload_length : 
            internal_index : 
        """
        return _dmdl_swig.framing_sptr_make(self, develop_mode, block_id, frame_type, len_frame_type, frame_index, len_frame_index, destination_address, len_destination_address, source_address, len_source_address, reserved_field_I, len_reserved_field_I, reserved_field_II, len_reserved_field_II, len_payload_length, increase_index, len_num_transmission, reserved_field_ampdu, node_list, slot_list_ms, len_slot_time_beacon, default_payload, default_payload_length, internal_index)


    def history(self):
        """history(framing_sptr self) -> unsigned int"""
        return _dmdl_swig.framing_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(framing_sptr self, int which, int delay)
        declare_sample_delay(framing_sptr self, unsigned int delay)
        """
        return _dmdl_swig.framing_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(framing_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.framing_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(framing_sptr self) -> int"""
        return _dmdl_swig.framing_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(framing_sptr self) -> double"""
        return _dmdl_swig.framing_sptr_relative_rate(self)


    def start(self):
        """start(framing_sptr self) -> bool"""
        return _dmdl_swig.framing_sptr_start(self)


    def stop(self):
        """stop(framing_sptr self) -> bool"""
        return _dmdl_swig.framing_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(framing_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.framing_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(framing_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.framing_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(framing_sptr self) -> int"""
        return _dmdl_swig.framing_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(framing_sptr self, int m)"""
        return _dmdl_swig.framing_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(framing_sptr self)"""
        return _dmdl_swig.framing_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(framing_sptr self) -> bool"""
        return _dmdl_swig.framing_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(framing_sptr self, int m)"""
        return _dmdl_swig.framing_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(framing_sptr self) -> int"""
        return _dmdl_swig.framing_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(framing_sptr self, int i) -> long"""
        return _dmdl_swig.framing_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(framing_sptr self, long max_output_buffer)
        set_max_output_buffer(framing_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.framing_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(framing_sptr self, int i) -> long"""
        return _dmdl_swig.framing_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(framing_sptr self, long min_output_buffer)
        set_min_output_buffer(framing_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.framing_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(framing_sptr self, int which) -> float
        pc_input_buffers_full(framing_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.framing_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(framing_sptr self, int which) -> float
        pc_input_buffers_full_avg(framing_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.framing_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(framing_sptr self, int which) -> float
        pc_input_buffers_full_var(framing_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.framing_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(framing_sptr self, int which) -> float
        pc_output_buffers_full(framing_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.framing_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(framing_sptr self, int which) -> float
        pc_output_buffers_full_avg(framing_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.framing_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(framing_sptr self, int which) -> float
        pc_output_buffers_full_var(framing_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.framing_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(framing_sptr self) -> float"""
        return _dmdl_swig.framing_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(framing_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.framing_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(framing_sptr self)"""
        return _dmdl_swig.framing_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(framing_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.framing_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(framing_sptr self) -> int"""
        return _dmdl_swig.framing_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(framing_sptr self) -> int"""
        return _dmdl_swig.framing_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(framing_sptr self, int priority) -> int"""
        return _dmdl_swig.framing_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(framing_sptr self) -> std::string"""
        return _dmdl_swig.framing_sptr_name(self)


    def symbol_name(self):
        """symbol_name(framing_sptr self) -> std::string"""
        return _dmdl_swig.framing_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(framing_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.framing_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(framing_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.framing_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(framing_sptr self) -> long"""
        return _dmdl_swig.framing_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(framing_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.framing_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(framing_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.framing_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(framing_sptr self) -> std::string"""
        return _dmdl_swig.framing_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(framing_sptr self, std::string name)"""
        return _dmdl_swig.framing_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(framing_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.framing_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(framing_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.framing_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(framing_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.framing_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(framing_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.framing_sptr_message_subscribers(self, which_port)

framing_sptr_swigregister = _dmdl_swig.framing_sptr_swigregister
framing_sptr_swigregister(framing_sptr)


framing_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
framing = framing.make;

class frame_analysis(object):
    """
    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::frame_analysis.

    To avoid accidental use of raw pointers, dmdl::frame_analysis's constructor is in a private implementation class. dmdl::frame_analysis::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        len_frame_type : 
        len_frame_index : 
        len_destination_address : 
        len_source_address : 
        len_num_transmission : 
        len_reserved_field_I : 
        len_reserved_field_II : 
        len_payload_length : 
        apply_self_address_check : 
        my_address : 
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, len_frame_type, len_frame_index, len_destination_address, len_source_address, len_num_transmission, len_reserved_field_I, len_reserved_field_II, len_payload_length, apply_self_address_check, my_address):
        """
        make(int develop_mode, int block_id, int len_frame_type, int len_frame_index, int len_destination_address, int len_source_address, int len_num_transmission, int len_reserved_field_I, int len_reserved_field_II, int len_payload_length, int apply_self_address_check, int my_address) -> frame_analysis_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::frame_analysis.

        To avoid accidental use of raw pointers, dmdl::frame_analysis's constructor is in a private implementation class. dmdl::frame_analysis::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            len_frame_type : 
            len_frame_index : 
            len_destination_address : 
            len_source_address : 
            len_num_transmission : 
            len_reserved_field_I : 
            len_reserved_field_II : 
            len_payload_length : 
            apply_self_address_check : 
            my_address : 
        """
        return _dmdl_swig.frame_analysis_make(develop_mode, block_id, len_frame_type, len_frame_index, len_destination_address, len_source_address, len_num_transmission, len_reserved_field_I, len_reserved_field_II, len_payload_length, apply_self_address_check, my_address)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_frame_analysis
    __del__ = lambda self: None
frame_analysis_swigregister = _dmdl_swig.frame_analysis_swigregister
frame_analysis_swigregister(frame_analysis)

def frame_analysis_make(develop_mode, block_id, len_frame_type, len_frame_index, len_destination_address, len_source_address, len_num_transmission, len_reserved_field_I, len_reserved_field_II, len_payload_length, apply_self_address_check, my_address):
    """
    frame_analysis_make(int develop_mode, int block_id, int len_frame_type, int len_frame_index, int len_destination_address, int len_source_address, int len_num_transmission, int len_reserved_field_I, int len_reserved_field_II, int len_payload_length, int apply_self_address_check, int my_address) -> frame_analysis_sptr

    <+description of block+>

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of dmdl::frame_analysis.

    To avoid accidental use of raw pointers, dmdl::frame_analysis's constructor is in a private implementation class. dmdl::frame_analysis::make is the public interface for creating new instances.

    Args:
        develop_mode : 
        block_id : 
        len_frame_type : 
        len_frame_index : 
        len_destination_address : 
        len_source_address : 
        len_num_transmission : 
        len_reserved_field_I : 
        len_reserved_field_II : 
        len_payload_length : 
        apply_self_address_check : 
        my_address : 
    """
    return _dmdl_swig.frame_analysis_make(develop_mode, block_id, len_frame_type, len_frame_index, len_destination_address, len_source_address, len_num_transmission, len_reserved_field_I, len_reserved_field_II, len_payload_length, apply_self_address_check, my_address)

class frame_analysis_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::frame_analysis)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::frame_analysis)> self) -> frame_analysis_sptr
        __init__(boost::shared_ptr<(gr::dmdl::frame_analysis)> self, frame_analysis p) -> frame_analysis_sptr
        """
        this = _dmdl_swig.new_frame_analysis_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(frame_analysis_sptr self) -> frame_analysis"""
        return _dmdl_swig.frame_analysis_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_frame_analysis_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, len_frame_type, len_frame_index, len_destination_address, len_source_address, len_num_transmission, len_reserved_field_I, len_reserved_field_II, len_payload_length, apply_self_address_check, my_address):
        """
        make(frame_analysis_sptr self, int develop_mode, int block_id, int len_frame_type, int len_frame_index, int len_destination_address, int len_source_address, int len_num_transmission, int len_reserved_field_I, int len_reserved_field_II, int len_payload_length, int apply_self_address_check, int my_address) -> frame_analysis_sptr

        <+description of block+>

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of dmdl::frame_analysis.

        To avoid accidental use of raw pointers, dmdl::frame_analysis's constructor is in a private implementation class. dmdl::frame_analysis::make is the public interface for creating new instances.

        Args:
            develop_mode : 
            block_id : 
            len_frame_type : 
            len_frame_index : 
            len_destination_address : 
            len_source_address : 
            len_num_transmission : 
            len_reserved_field_I : 
            len_reserved_field_II : 
            len_payload_length : 
            apply_self_address_check : 
            my_address : 
        """
        return _dmdl_swig.frame_analysis_sptr_make(self, develop_mode, block_id, len_frame_type, len_frame_index, len_destination_address, len_source_address, len_num_transmission, len_reserved_field_I, len_reserved_field_II, len_payload_length, apply_self_address_check, my_address)


    def history(self):
        """history(frame_analysis_sptr self) -> unsigned int"""
        return _dmdl_swig.frame_analysis_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(frame_analysis_sptr self, int which, int delay)
        declare_sample_delay(frame_analysis_sptr self, unsigned int delay)
        """
        return _dmdl_swig.frame_analysis_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(frame_analysis_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.frame_analysis_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(frame_analysis_sptr self) -> int"""
        return _dmdl_swig.frame_analysis_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(frame_analysis_sptr self) -> double"""
        return _dmdl_swig.frame_analysis_sptr_relative_rate(self)


    def start(self):
        """start(frame_analysis_sptr self) -> bool"""
        return _dmdl_swig.frame_analysis_sptr_start(self)


    def stop(self):
        """stop(frame_analysis_sptr self) -> bool"""
        return _dmdl_swig.frame_analysis_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(frame_analysis_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.frame_analysis_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(frame_analysis_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.frame_analysis_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(frame_analysis_sptr self) -> int"""
        return _dmdl_swig.frame_analysis_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(frame_analysis_sptr self, int m)"""
        return _dmdl_swig.frame_analysis_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(frame_analysis_sptr self)"""
        return _dmdl_swig.frame_analysis_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(frame_analysis_sptr self) -> bool"""
        return _dmdl_swig.frame_analysis_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(frame_analysis_sptr self, int m)"""
        return _dmdl_swig.frame_analysis_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(frame_analysis_sptr self) -> int"""
        return _dmdl_swig.frame_analysis_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(frame_analysis_sptr self, int i) -> long"""
        return _dmdl_swig.frame_analysis_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(frame_analysis_sptr self, long max_output_buffer)
        set_max_output_buffer(frame_analysis_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.frame_analysis_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(frame_analysis_sptr self, int i) -> long"""
        return _dmdl_swig.frame_analysis_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(frame_analysis_sptr self, long min_output_buffer)
        set_min_output_buffer(frame_analysis_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.frame_analysis_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(frame_analysis_sptr self, int which) -> float
        pc_input_buffers_full(frame_analysis_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.frame_analysis_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(frame_analysis_sptr self, int which) -> float
        pc_input_buffers_full_avg(frame_analysis_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.frame_analysis_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(frame_analysis_sptr self, int which) -> float
        pc_input_buffers_full_var(frame_analysis_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.frame_analysis_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(frame_analysis_sptr self, int which) -> float
        pc_output_buffers_full(frame_analysis_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.frame_analysis_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(frame_analysis_sptr self, int which) -> float
        pc_output_buffers_full_avg(frame_analysis_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.frame_analysis_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(frame_analysis_sptr self, int which) -> float
        pc_output_buffers_full_var(frame_analysis_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.frame_analysis_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(frame_analysis_sptr self) -> float"""
        return _dmdl_swig.frame_analysis_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(frame_analysis_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.frame_analysis_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(frame_analysis_sptr self)"""
        return _dmdl_swig.frame_analysis_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(frame_analysis_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.frame_analysis_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(frame_analysis_sptr self) -> int"""
        return _dmdl_swig.frame_analysis_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(frame_analysis_sptr self) -> int"""
        return _dmdl_swig.frame_analysis_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(frame_analysis_sptr self, int priority) -> int"""
        return _dmdl_swig.frame_analysis_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(frame_analysis_sptr self) -> std::string"""
        return _dmdl_swig.frame_analysis_sptr_name(self)


    def symbol_name(self):
        """symbol_name(frame_analysis_sptr self) -> std::string"""
        return _dmdl_swig.frame_analysis_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(frame_analysis_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.frame_analysis_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(frame_analysis_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.frame_analysis_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(frame_analysis_sptr self) -> long"""
        return _dmdl_swig.frame_analysis_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(frame_analysis_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.frame_analysis_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(frame_analysis_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.frame_analysis_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(frame_analysis_sptr self) -> std::string"""
        return _dmdl_swig.frame_analysis_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(frame_analysis_sptr self, std::string name)"""
        return _dmdl_swig.frame_analysis_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(frame_analysis_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.frame_analysis_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(frame_analysis_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.frame_analysis_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(frame_analysis_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.frame_analysis_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(frame_analysis_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.frame_analysis_sptr_message_subscribers(self, which_port)

frame_analysis_sptr_swigregister = _dmdl_swig.frame_analysis_sptr_swigregister
frame_analysis_sptr_swigregister(frame_analysis_sptr)


frame_analysis_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
frame_analysis = frame_analysis.make;

class cmd_buffer(object):
    """Proxy of C++ gr::dmdl::cmd_buffer class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, buffer_size, auto_dequeue_first, keep_dequeue_state, auto_dequeue_full):
        """make(int develop_mode, int block_id, int buffer_size, int auto_dequeue_first, int keep_dequeue_state, int auto_dequeue_full) -> cmd_buffer_sptr"""
        return _dmdl_swig.cmd_buffer_make(develop_mode, block_id, buffer_size, auto_dequeue_first, keep_dequeue_state, auto_dequeue_full)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_cmd_buffer
    __del__ = lambda self: None
cmd_buffer_swigregister = _dmdl_swig.cmd_buffer_swigregister
cmd_buffer_swigregister(cmd_buffer)

def cmd_buffer_make(develop_mode, block_id, buffer_size, auto_dequeue_first, keep_dequeue_state, auto_dequeue_full):
    """cmd_buffer_make(int develop_mode, int block_id, int buffer_size, int auto_dequeue_first, int keep_dequeue_state, int auto_dequeue_full) -> cmd_buffer_sptr"""
    return _dmdl_swig.cmd_buffer_make(develop_mode, block_id, buffer_size, auto_dequeue_first, keep_dequeue_state, auto_dequeue_full)

class cmd_buffer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::cmd_buffer)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::cmd_buffer)> self) -> cmd_buffer_sptr
        __init__(boost::shared_ptr<(gr::dmdl::cmd_buffer)> self, cmd_buffer p) -> cmd_buffer_sptr
        """
        this = _dmdl_swig.new_cmd_buffer_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(cmd_buffer_sptr self) -> cmd_buffer"""
        return _dmdl_swig.cmd_buffer_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_cmd_buffer_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, buffer_size, auto_dequeue_first, keep_dequeue_state, auto_dequeue_full):
        """make(cmd_buffer_sptr self, int develop_mode, int block_id, int buffer_size, int auto_dequeue_first, int keep_dequeue_state, int auto_dequeue_full) -> cmd_buffer_sptr"""
        return _dmdl_swig.cmd_buffer_sptr_make(self, develop_mode, block_id, buffer_size, auto_dequeue_first, keep_dequeue_state, auto_dequeue_full)


    def history(self):
        """history(cmd_buffer_sptr self) -> unsigned int"""
        return _dmdl_swig.cmd_buffer_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cmd_buffer_sptr self, int which, int delay)
        declare_sample_delay(cmd_buffer_sptr self, unsigned int delay)
        """
        return _dmdl_swig.cmd_buffer_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(cmd_buffer_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.cmd_buffer_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(cmd_buffer_sptr self) -> int"""
        return _dmdl_swig.cmd_buffer_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(cmd_buffer_sptr self) -> double"""
        return _dmdl_swig.cmd_buffer_sptr_relative_rate(self)


    def start(self):
        """start(cmd_buffer_sptr self) -> bool"""
        return _dmdl_swig.cmd_buffer_sptr_start(self)


    def stop(self):
        """stop(cmd_buffer_sptr self) -> bool"""
        return _dmdl_swig.cmd_buffer_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(cmd_buffer_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.cmd_buffer_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(cmd_buffer_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.cmd_buffer_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(cmd_buffer_sptr self) -> int"""
        return _dmdl_swig.cmd_buffer_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(cmd_buffer_sptr self, int m)"""
        return _dmdl_swig.cmd_buffer_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cmd_buffer_sptr self)"""
        return _dmdl_swig.cmd_buffer_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cmd_buffer_sptr self) -> bool"""
        return _dmdl_swig.cmd_buffer_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(cmd_buffer_sptr self, int m)"""
        return _dmdl_swig.cmd_buffer_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(cmd_buffer_sptr self) -> int"""
        return _dmdl_swig.cmd_buffer_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(cmd_buffer_sptr self, int i) -> long"""
        return _dmdl_swig.cmd_buffer_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cmd_buffer_sptr self, long max_output_buffer)
        set_max_output_buffer(cmd_buffer_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.cmd_buffer_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(cmd_buffer_sptr self, int i) -> long"""
        return _dmdl_swig.cmd_buffer_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cmd_buffer_sptr self, long min_output_buffer)
        set_min_output_buffer(cmd_buffer_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.cmd_buffer_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cmd_buffer_sptr self, int which) -> float
        pc_input_buffers_full(cmd_buffer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.cmd_buffer_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cmd_buffer_sptr self, int which) -> float
        pc_input_buffers_full_avg(cmd_buffer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.cmd_buffer_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cmd_buffer_sptr self, int which) -> float
        pc_input_buffers_full_var(cmd_buffer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.cmd_buffer_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cmd_buffer_sptr self, int which) -> float
        pc_output_buffers_full(cmd_buffer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.cmd_buffer_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cmd_buffer_sptr self, int which) -> float
        pc_output_buffers_full_avg(cmd_buffer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.cmd_buffer_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cmd_buffer_sptr self, int which) -> float
        pc_output_buffers_full_var(cmd_buffer_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.cmd_buffer_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(cmd_buffer_sptr self) -> float"""
        return _dmdl_swig.cmd_buffer_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(cmd_buffer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.cmd_buffer_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(cmd_buffer_sptr self)"""
        return _dmdl_swig.cmd_buffer_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(cmd_buffer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.cmd_buffer_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(cmd_buffer_sptr self) -> int"""
        return _dmdl_swig.cmd_buffer_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(cmd_buffer_sptr self) -> int"""
        return _dmdl_swig.cmd_buffer_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(cmd_buffer_sptr self, int priority) -> int"""
        return _dmdl_swig.cmd_buffer_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(cmd_buffer_sptr self) -> std::string"""
        return _dmdl_swig.cmd_buffer_sptr_name(self)


    def symbol_name(self):
        """symbol_name(cmd_buffer_sptr self) -> std::string"""
        return _dmdl_swig.cmd_buffer_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(cmd_buffer_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.cmd_buffer_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(cmd_buffer_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.cmd_buffer_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(cmd_buffer_sptr self) -> long"""
        return _dmdl_swig.cmd_buffer_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(cmd_buffer_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.cmd_buffer_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(cmd_buffer_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.cmd_buffer_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(cmd_buffer_sptr self) -> std::string"""
        return _dmdl_swig.cmd_buffer_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(cmd_buffer_sptr self, std::string name)"""
        return _dmdl_swig.cmd_buffer_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(cmd_buffer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.cmd_buffer_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(cmd_buffer_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.cmd_buffer_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(cmd_buffer_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.cmd_buffer_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(cmd_buffer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.cmd_buffer_sptr_message_subscribers(self, which_port)

cmd_buffer_sptr_swigregister = _dmdl_swig.cmd_buffer_sptr_swigregister
cmd_buffer_sptr_swigregister(cmd_buffer_sptr)


cmd_buffer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cmd_buffer = cmd_buffer.make;

class error_detection(object):
    """Proxy of C++ gr::dmdl::error_detection class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id):
        """make(int develop_mode, int block_id) -> error_detection_sptr"""
        return _dmdl_swig.error_detection_make(develop_mode, block_id)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_error_detection
    __del__ = lambda self: None
error_detection_swigregister = _dmdl_swig.error_detection_swigregister
error_detection_swigregister(error_detection)

def error_detection_make(develop_mode, block_id):
    """error_detection_make(int develop_mode, int block_id) -> error_detection_sptr"""
    return _dmdl_swig.error_detection_make(develop_mode, block_id)

class error_detection_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::error_detection)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::error_detection)> self) -> error_detection_sptr
        __init__(boost::shared_ptr<(gr::dmdl::error_detection)> self, error_detection p) -> error_detection_sptr
        """
        this = _dmdl_swig.new_error_detection_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(error_detection_sptr self) -> error_detection"""
        return _dmdl_swig.error_detection_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_error_detection_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id):
        """make(error_detection_sptr self, int develop_mode, int block_id) -> error_detection_sptr"""
        return _dmdl_swig.error_detection_sptr_make(self, develop_mode, block_id)


    def history(self):
        """history(error_detection_sptr self) -> unsigned int"""
        return _dmdl_swig.error_detection_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(error_detection_sptr self, int which, int delay)
        declare_sample_delay(error_detection_sptr self, unsigned int delay)
        """
        return _dmdl_swig.error_detection_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(error_detection_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.error_detection_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(error_detection_sptr self) -> int"""
        return _dmdl_swig.error_detection_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(error_detection_sptr self) -> double"""
        return _dmdl_swig.error_detection_sptr_relative_rate(self)


    def start(self):
        """start(error_detection_sptr self) -> bool"""
        return _dmdl_swig.error_detection_sptr_start(self)


    def stop(self):
        """stop(error_detection_sptr self) -> bool"""
        return _dmdl_swig.error_detection_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(error_detection_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.error_detection_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(error_detection_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.error_detection_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(error_detection_sptr self) -> int"""
        return _dmdl_swig.error_detection_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(error_detection_sptr self, int m)"""
        return _dmdl_swig.error_detection_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(error_detection_sptr self)"""
        return _dmdl_swig.error_detection_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(error_detection_sptr self) -> bool"""
        return _dmdl_swig.error_detection_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(error_detection_sptr self, int m)"""
        return _dmdl_swig.error_detection_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(error_detection_sptr self) -> int"""
        return _dmdl_swig.error_detection_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(error_detection_sptr self, int i) -> long"""
        return _dmdl_swig.error_detection_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(error_detection_sptr self, long max_output_buffer)
        set_max_output_buffer(error_detection_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.error_detection_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(error_detection_sptr self, int i) -> long"""
        return _dmdl_swig.error_detection_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(error_detection_sptr self, long min_output_buffer)
        set_min_output_buffer(error_detection_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.error_detection_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(error_detection_sptr self, int which) -> float
        pc_input_buffers_full(error_detection_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.error_detection_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(error_detection_sptr self, int which) -> float
        pc_input_buffers_full_avg(error_detection_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.error_detection_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(error_detection_sptr self, int which) -> float
        pc_input_buffers_full_var(error_detection_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.error_detection_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(error_detection_sptr self, int which) -> float
        pc_output_buffers_full(error_detection_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.error_detection_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(error_detection_sptr self, int which) -> float
        pc_output_buffers_full_avg(error_detection_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.error_detection_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(error_detection_sptr self, int which) -> float
        pc_output_buffers_full_var(error_detection_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.error_detection_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(error_detection_sptr self) -> float"""
        return _dmdl_swig.error_detection_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(error_detection_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.error_detection_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(error_detection_sptr self)"""
        return _dmdl_swig.error_detection_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(error_detection_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.error_detection_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(error_detection_sptr self) -> int"""
        return _dmdl_swig.error_detection_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(error_detection_sptr self) -> int"""
        return _dmdl_swig.error_detection_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(error_detection_sptr self, int priority) -> int"""
        return _dmdl_swig.error_detection_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(error_detection_sptr self) -> std::string"""
        return _dmdl_swig.error_detection_sptr_name(self)


    def symbol_name(self):
        """symbol_name(error_detection_sptr self) -> std::string"""
        return _dmdl_swig.error_detection_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(error_detection_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.error_detection_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(error_detection_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.error_detection_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(error_detection_sptr self) -> long"""
        return _dmdl_swig.error_detection_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(error_detection_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.error_detection_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(error_detection_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.error_detection_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(error_detection_sptr self) -> std::string"""
        return _dmdl_swig.error_detection_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(error_detection_sptr self, std::string name)"""
        return _dmdl_swig.error_detection_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(error_detection_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.error_detection_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(error_detection_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.error_detection_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(error_detection_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.error_detection_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(error_detection_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.error_detection_sptr_message_subscribers(self, which_port)

error_detection_sptr_swigregister = _dmdl_swig.error_detection_sptr_swigregister
error_detection_sptr_swigregister(error_detection_sptr)


error_detection_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
error_detection = error_detection.make;

class type_check(object):
    """Proxy of C++ gr::dmdl::type_check class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, data_frame, ack_frame, beacon_frame, rts_frame, cts_frame, ampdu_frame, amsdu_frame, ampdu_subframe, amsdu_subframe, other_frame):
        """make(int develop_mode, int block_id, int data_frame, int ack_frame, int beacon_frame, int rts_frame, int cts_frame, int ampdu_frame, int amsdu_frame, int ampdu_subframe, int amsdu_subframe, int other_frame) -> type_check_sptr"""
        return _dmdl_swig.type_check_make(develop_mode, block_id, data_frame, ack_frame, beacon_frame, rts_frame, cts_frame, ampdu_frame, amsdu_frame, ampdu_subframe, amsdu_subframe, other_frame)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_type_check
    __del__ = lambda self: None
type_check_swigregister = _dmdl_swig.type_check_swigregister
type_check_swigregister(type_check)

def type_check_make(develop_mode, block_id, data_frame, ack_frame, beacon_frame, rts_frame, cts_frame, ampdu_frame, amsdu_frame, ampdu_subframe, amsdu_subframe, other_frame):
    """type_check_make(int develop_mode, int block_id, int data_frame, int ack_frame, int beacon_frame, int rts_frame, int cts_frame, int ampdu_frame, int amsdu_frame, int ampdu_subframe, int amsdu_subframe, int other_frame) -> type_check_sptr"""
    return _dmdl_swig.type_check_make(develop_mode, block_id, data_frame, ack_frame, beacon_frame, rts_frame, cts_frame, ampdu_frame, amsdu_frame, ampdu_subframe, amsdu_subframe, other_frame)

class type_check_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::type_check)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::type_check)> self) -> type_check_sptr
        __init__(boost::shared_ptr<(gr::dmdl::type_check)> self, type_check p) -> type_check_sptr
        """
        this = _dmdl_swig.new_type_check_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(type_check_sptr self) -> type_check"""
        return _dmdl_swig.type_check_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_type_check_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, data_frame, ack_frame, beacon_frame, rts_frame, cts_frame, ampdu_frame, amsdu_frame, ampdu_subframe, amsdu_subframe, other_frame):
        """make(type_check_sptr self, int develop_mode, int block_id, int data_frame, int ack_frame, int beacon_frame, int rts_frame, int cts_frame, int ampdu_frame, int amsdu_frame, int ampdu_subframe, int amsdu_subframe, int other_frame) -> type_check_sptr"""
        return _dmdl_swig.type_check_sptr_make(self, develop_mode, block_id, data_frame, ack_frame, beacon_frame, rts_frame, cts_frame, ampdu_frame, amsdu_frame, ampdu_subframe, amsdu_subframe, other_frame)


    def history(self):
        """history(type_check_sptr self) -> unsigned int"""
        return _dmdl_swig.type_check_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(type_check_sptr self, int which, int delay)
        declare_sample_delay(type_check_sptr self, unsigned int delay)
        """
        return _dmdl_swig.type_check_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(type_check_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.type_check_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(type_check_sptr self) -> int"""
        return _dmdl_swig.type_check_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(type_check_sptr self) -> double"""
        return _dmdl_swig.type_check_sptr_relative_rate(self)


    def start(self):
        """start(type_check_sptr self) -> bool"""
        return _dmdl_swig.type_check_sptr_start(self)


    def stop(self):
        """stop(type_check_sptr self) -> bool"""
        return _dmdl_swig.type_check_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(type_check_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.type_check_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(type_check_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.type_check_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(type_check_sptr self) -> int"""
        return _dmdl_swig.type_check_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(type_check_sptr self, int m)"""
        return _dmdl_swig.type_check_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(type_check_sptr self)"""
        return _dmdl_swig.type_check_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(type_check_sptr self) -> bool"""
        return _dmdl_swig.type_check_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(type_check_sptr self, int m)"""
        return _dmdl_swig.type_check_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(type_check_sptr self) -> int"""
        return _dmdl_swig.type_check_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(type_check_sptr self, int i) -> long"""
        return _dmdl_swig.type_check_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(type_check_sptr self, long max_output_buffer)
        set_max_output_buffer(type_check_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.type_check_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(type_check_sptr self, int i) -> long"""
        return _dmdl_swig.type_check_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(type_check_sptr self, long min_output_buffer)
        set_min_output_buffer(type_check_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.type_check_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(type_check_sptr self, int which) -> float
        pc_input_buffers_full(type_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.type_check_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(type_check_sptr self, int which) -> float
        pc_input_buffers_full_avg(type_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.type_check_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(type_check_sptr self, int which) -> float
        pc_input_buffers_full_var(type_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.type_check_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(type_check_sptr self, int which) -> float
        pc_output_buffers_full(type_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.type_check_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(type_check_sptr self, int which) -> float
        pc_output_buffers_full_avg(type_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.type_check_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(type_check_sptr self, int which) -> float
        pc_output_buffers_full_var(type_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.type_check_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(type_check_sptr self) -> float"""
        return _dmdl_swig.type_check_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(type_check_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.type_check_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(type_check_sptr self)"""
        return _dmdl_swig.type_check_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(type_check_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.type_check_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(type_check_sptr self) -> int"""
        return _dmdl_swig.type_check_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(type_check_sptr self) -> int"""
        return _dmdl_swig.type_check_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(type_check_sptr self, int priority) -> int"""
        return _dmdl_swig.type_check_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(type_check_sptr self) -> std::string"""
        return _dmdl_swig.type_check_sptr_name(self)


    def symbol_name(self):
        """symbol_name(type_check_sptr self) -> std::string"""
        return _dmdl_swig.type_check_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(type_check_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.type_check_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(type_check_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.type_check_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(type_check_sptr self) -> long"""
        return _dmdl_swig.type_check_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(type_check_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.type_check_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(type_check_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.type_check_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(type_check_sptr self) -> std::string"""
        return _dmdl_swig.type_check_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(type_check_sptr self, std::string name)"""
        return _dmdl_swig.type_check_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(type_check_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.type_check_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(type_check_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.type_check_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(type_check_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.type_check_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(type_check_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.type_check_sptr_message_subscribers(self, which_port)

type_check_sptr_swigregister = _dmdl_swig.type_check_sptr_swigregister
type_check_sptr_swigregister(type_check_sptr)


type_check_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
type_check = type_check.make;

class address_check(object):
    """Proxy of C++ gr::dmdl::address_check class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, my_address, mode):
        """make(int develop_mode, int block_id, int my_address, int mode) -> address_check_sptr"""
        return _dmdl_swig.address_check_make(develop_mode, block_id, my_address, mode)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_address_check
    __del__ = lambda self: None
address_check_swigregister = _dmdl_swig.address_check_swigregister
address_check_swigregister(address_check)

def address_check_make(develop_mode, block_id, my_address, mode):
    """address_check_make(int develop_mode, int block_id, int my_address, int mode) -> address_check_sptr"""
    return _dmdl_swig.address_check_make(develop_mode, block_id, my_address, mode)

class address_check_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::address_check)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::address_check)> self) -> address_check_sptr
        __init__(boost::shared_ptr<(gr::dmdl::address_check)> self, address_check p) -> address_check_sptr
        """
        this = _dmdl_swig.new_address_check_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(address_check_sptr self) -> address_check"""
        return _dmdl_swig.address_check_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_address_check_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, my_address, mode):
        """make(address_check_sptr self, int develop_mode, int block_id, int my_address, int mode) -> address_check_sptr"""
        return _dmdl_swig.address_check_sptr_make(self, develop_mode, block_id, my_address, mode)


    def history(self):
        """history(address_check_sptr self) -> unsigned int"""
        return _dmdl_swig.address_check_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(address_check_sptr self, int which, int delay)
        declare_sample_delay(address_check_sptr self, unsigned int delay)
        """
        return _dmdl_swig.address_check_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(address_check_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.address_check_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(address_check_sptr self) -> int"""
        return _dmdl_swig.address_check_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(address_check_sptr self) -> double"""
        return _dmdl_swig.address_check_sptr_relative_rate(self)


    def start(self):
        """start(address_check_sptr self) -> bool"""
        return _dmdl_swig.address_check_sptr_start(self)


    def stop(self):
        """stop(address_check_sptr self) -> bool"""
        return _dmdl_swig.address_check_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(address_check_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.address_check_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(address_check_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.address_check_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(address_check_sptr self) -> int"""
        return _dmdl_swig.address_check_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(address_check_sptr self, int m)"""
        return _dmdl_swig.address_check_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(address_check_sptr self)"""
        return _dmdl_swig.address_check_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(address_check_sptr self) -> bool"""
        return _dmdl_swig.address_check_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(address_check_sptr self, int m)"""
        return _dmdl_swig.address_check_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(address_check_sptr self) -> int"""
        return _dmdl_swig.address_check_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(address_check_sptr self, int i) -> long"""
        return _dmdl_swig.address_check_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(address_check_sptr self, long max_output_buffer)
        set_max_output_buffer(address_check_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.address_check_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(address_check_sptr self, int i) -> long"""
        return _dmdl_swig.address_check_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(address_check_sptr self, long min_output_buffer)
        set_min_output_buffer(address_check_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.address_check_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(address_check_sptr self, int which) -> float
        pc_input_buffers_full(address_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.address_check_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(address_check_sptr self, int which) -> float
        pc_input_buffers_full_avg(address_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.address_check_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(address_check_sptr self, int which) -> float
        pc_input_buffers_full_var(address_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.address_check_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(address_check_sptr self, int which) -> float
        pc_output_buffers_full(address_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.address_check_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(address_check_sptr self, int which) -> float
        pc_output_buffers_full_avg(address_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.address_check_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(address_check_sptr self, int which) -> float
        pc_output_buffers_full_var(address_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.address_check_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(address_check_sptr self) -> float"""
        return _dmdl_swig.address_check_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(address_check_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.address_check_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(address_check_sptr self)"""
        return _dmdl_swig.address_check_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(address_check_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.address_check_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(address_check_sptr self) -> int"""
        return _dmdl_swig.address_check_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(address_check_sptr self) -> int"""
        return _dmdl_swig.address_check_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(address_check_sptr self, int priority) -> int"""
        return _dmdl_swig.address_check_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(address_check_sptr self) -> std::string"""
        return _dmdl_swig.address_check_sptr_name(self)


    def symbol_name(self):
        """symbol_name(address_check_sptr self) -> std::string"""
        return _dmdl_swig.address_check_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(address_check_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.address_check_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(address_check_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.address_check_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(address_check_sptr self) -> long"""
        return _dmdl_swig.address_check_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(address_check_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.address_check_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(address_check_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.address_check_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(address_check_sptr self) -> std::string"""
        return _dmdl_swig.address_check_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(address_check_sptr self, std::string name)"""
        return _dmdl_swig.address_check_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(address_check_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.address_check_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(address_check_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.address_check_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(address_check_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.address_check_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(address_check_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.address_check_sptr_message_subscribers(self, which_port)

address_check_sptr_swigregister = _dmdl_swig.address_check_sptr_swigregister
address_check_sptr_swigregister(address_check_sptr)


address_check_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
address_check = address_check.make;

class resend_check(object):
    """Proxy of C++ gr::dmdl::resend_check class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def make(develop_mode, block_id, max_resend):
        """make(int develop_mode, int block_id, int max_resend) -> resend_check_sptr"""
        return _dmdl_swig.resend_check_make(develop_mode, block_id, max_resend)

    make = staticmethod(make)
    __swig_destroy__ = _dmdl_swig.delete_resend_check
    __del__ = lambda self: None
resend_check_swigregister = _dmdl_swig.resend_check_swigregister
resend_check_swigregister(resend_check)

def resend_check_make(develop_mode, block_id, max_resend):
    """resend_check_make(int develop_mode, int block_id, int max_resend) -> resend_check_sptr"""
    return _dmdl_swig.resend_check_make(develop_mode, block_id, max_resend)

class resend_check_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::dmdl::resend_check)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::dmdl::resend_check)> self) -> resend_check_sptr
        __init__(boost::shared_ptr<(gr::dmdl::resend_check)> self, resend_check p) -> resend_check_sptr
        """
        this = _dmdl_swig.new_resend_check_sptr(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def __deref__(self):
        """__deref__(resend_check_sptr self) -> resend_check"""
        return _dmdl_swig.resend_check_sptr___deref__(self)

    __swig_destroy__ = _dmdl_swig.delete_resend_check_sptr
    __del__ = lambda self: None

    def make(self, develop_mode, block_id, max_resend):
        """make(resend_check_sptr self, int develop_mode, int block_id, int max_resend) -> resend_check_sptr"""
        return _dmdl_swig.resend_check_sptr_make(self, develop_mode, block_id, max_resend)


    def history(self):
        """history(resend_check_sptr self) -> unsigned int"""
        return _dmdl_swig.resend_check_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(resend_check_sptr self, int which, int delay)
        declare_sample_delay(resend_check_sptr self, unsigned int delay)
        """
        return _dmdl_swig.resend_check_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(resend_check_sptr self, int which) -> unsigned int"""
        return _dmdl_swig.resend_check_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(resend_check_sptr self) -> int"""
        return _dmdl_swig.resend_check_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(resend_check_sptr self) -> double"""
        return _dmdl_swig.resend_check_sptr_relative_rate(self)


    def start(self):
        """start(resend_check_sptr self) -> bool"""
        return _dmdl_swig.resend_check_sptr_start(self)


    def stop(self):
        """stop(resend_check_sptr self) -> bool"""
        return _dmdl_swig.resend_check_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(resend_check_sptr self, unsigned int which_input) -> uint64_t"""
        return _dmdl_swig.resend_check_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(resend_check_sptr self, unsigned int which_output) -> uint64_t"""
        return _dmdl_swig.resend_check_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(resend_check_sptr self) -> int"""
        return _dmdl_swig.resend_check_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(resend_check_sptr self, int m)"""
        return _dmdl_swig.resend_check_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(resend_check_sptr self)"""
        return _dmdl_swig.resend_check_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(resend_check_sptr self) -> bool"""
        return _dmdl_swig.resend_check_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(resend_check_sptr self, int m)"""
        return _dmdl_swig.resend_check_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(resend_check_sptr self) -> int"""
        return _dmdl_swig.resend_check_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(resend_check_sptr self, int i) -> long"""
        return _dmdl_swig.resend_check_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(resend_check_sptr self, long max_output_buffer)
        set_max_output_buffer(resend_check_sptr self, int port, long max_output_buffer)
        """
        return _dmdl_swig.resend_check_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(resend_check_sptr self, int i) -> long"""
        return _dmdl_swig.resend_check_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(resend_check_sptr self, long min_output_buffer)
        set_min_output_buffer(resend_check_sptr self, int port, long min_output_buffer)
        """
        return _dmdl_swig.resend_check_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(resend_check_sptr self, int which) -> float
        pc_input_buffers_full(resend_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.resend_check_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(resend_check_sptr self, int which) -> float
        pc_input_buffers_full_avg(resend_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.resend_check_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(resend_check_sptr self, int which) -> float
        pc_input_buffers_full_var(resend_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.resend_check_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(resend_check_sptr self, int which) -> float
        pc_output_buffers_full(resend_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.resend_check_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(resend_check_sptr self, int which) -> float
        pc_output_buffers_full_avg(resend_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.resend_check_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(resend_check_sptr self, int which) -> float
        pc_output_buffers_full_var(resend_check_sptr self) -> pmt_vector_float
        """
        return _dmdl_swig.resend_check_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(resend_check_sptr self) -> float"""
        return _dmdl_swig.resend_check_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(resend_check_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _dmdl_swig.resend_check_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(resend_check_sptr self)"""
        return _dmdl_swig.resend_check_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(resend_check_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _dmdl_swig.resend_check_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(resend_check_sptr self) -> int"""
        return _dmdl_swig.resend_check_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(resend_check_sptr self) -> int"""
        return _dmdl_swig.resend_check_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(resend_check_sptr self, int priority) -> int"""
        return _dmdl_swig.resend_check_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(resend_check_sptr self) -> std::string"""
        return _dmdl_swig.resend_check_sptr_name(self)


    def symbol_name(self):
        """symbol_name(resend_check_sptr self) -> std::string"""
        return _dmdl_swig.resend_check_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(resend_check_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.resend_check_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(resend_check_sptr self) -> io_signature_sptr"""
        return _dmdl_swig.resend_check_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(resend_check_sptr self) -> long"""
        return _dmdl_swig.resend_check_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(resend_check_sptr self) -> basic_block_sptr"""
        return _dmdl_swig.resend_check_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(resend_check_sptr self, int ninputs, int noutputs) -> bool"""
        return _dmdl_swig.resend_check_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(resend_check_sptr self) -> std::string"""
        return _dmdl_swig.resend_check_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(resend_check_sptr self, std::string name)"""
        return _dmdl_swig.resend_check_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(resend_check_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _dmdl_swig.resend_check_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(resend_check_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.resend_check_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(resend_check_sptr self) -> swig_int_ptr"""
        return _dmdl_swig.resend_check_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(resend_check_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _dmdl_swig.resend_check_sptr_message_subscribers(self, which_port)

resend_check_sptr_swigregister = _dmdl_swig.resend_check_sptr_swigregister
resend_check_sptr_swigregister(resend_check_sptr)


resend_check_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
resend_check = resend_check.make;



